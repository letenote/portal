{"ast":null,"code":"import _classCallCheck from \"/Users/rezaaditya/Documents/github/portal/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rezaaditya/Documents/github/portal/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { defaultMethod, validMethods } from './utils/constants.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n * The \"match\" callback determine if a route should be used to \"handle\" a\n * request by returning a non-falsy value if it can. The \"handler\" callback\n * is called when there is a match and should return a Promise that resolves\n * to a `Response`.\n *\n * @memberof workbox-routing\n */\n\nvar Route = /*#__PURE__*/function () {\n  /**\n   * Constructor for Route class.\n   *\n   * @param {workbox-routing~matchCallback} match\n   * A callback function that determines whether the route matches a given\n   * `fetch` event by returning a non-falsy value.\n   * @param {workbox-routing~handlerCallback} handler A callback\n   * function that returns a Promise resolving to a Response.\n   * @param {string} [method='GET'] The HTTP method to match the Route\n   * against.\n   */\n  function Route(match, handler) {\n    var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultMethod;\n\n    _classCallCheck(this, Route);\n\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isType(match, 'function', {\n        moduleName: 'workbox-routing',\n        className: 'Route',\n        funcName: 'constructor',\n        paramName: 'match'\n      });\n\n      if (method) {\n        assert.isOneOf(method, validMethods, {\n          paramName: 'method'\n        });\n      }\n    } // These values are referenced directly by Router so cannot be\n    // altered by minificaton.\n\n\n    this.handler = normalizeHandler(handler);\n    this.match = match;\n    this.method = method;\n  }\n  /**\n   *\n   * @param {workbox-routing-handlerCallback} handler A callback\n   * function that returns a Promise resolving to a Response\n   */\n\n\n  _createClass(Route, [{\n    key: \"setCatchHandler\",\n    value: function setCatchHandler(handler) {\n      this.catchHandler = normalizeHandler(handler);\n    }\n  }]);\n\n  return Route;\n}();\n\nexport { Route };","map":null,"metadata":{},"sourceType":"module"}