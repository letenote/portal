{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rezaaditya/Documents/github/portal/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/rezaaditya/Documents/github/portal/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/rezaaditya/Documents/github/portal/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rezaaditya/Documents/github/portal/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/rezaaditya/Documents/github/portal/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/rezaaditya/Documents/github/portal/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network-only](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#network-only)\n * request strategy.\n *\n * This class is useful if you want to take advantage of any\n * [Workbox plugins](https://developer.chrome.com/docs/workbox/using-plugins/).\n *\n * If the network request fails, this will throw a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\n\nvar NetworkOnly = /*#__PURE__*/function (_Strategy) {\n  _inherits(NetworkOnly, _Strategy);\n\n  var _super = _createSuper(NetworkOnly);\n\n  /**\n   * @param {Object} [options]\n   * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n   * to use in conjunction with this caching strategy.\n   * @param {Object} [options.fetchOptions] Values passed along to the\n   * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n   * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n   * `fetch()` requests made by this strategy.\n   * @param {number} [options.networkTimeoutSeconds] If set, any network requests\n   * that fail to respond within the timeout will result in a network error.\n   */\n  function NetworkOnly() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, NetworkOnly);\n\n    _this = _super.call(this, options);\n    _this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n    return _this;\n  }\n  /**\n   * @private\n   * @param {Request|string} request A request to run this strategy for.\n   * @param {workbox-strategies.StrategyHandler} handler The event that\n   *     triggered the request.\n   * @return {Promise<Response>}\n   */\n\n\n  _createClass(NetworkOnly, [{\n    key: \"_handle\",\n    value: function () {\n      var _handle2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(request, handler) {\n        var error, response, promises, timeoutPromise;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (process.env.NODE_ENV !== 'production') {\n                  assert.isInstance(request, Request, {\n                    moduleName: 'workbox-strategies',\n                    className: this.constructor.name,\n                    funcName: '_handle',\n                    paramName: 'request'\n                  });\n                }\n\n                error = undefined;\n                _context.prev = 2;\n                promises = [handler.fetch(request)];\n\n                if (this._networkTimeoutSeconds) {\n                  timeoutPromise = timeout(this._networkTimeoutSeconds * 1000);\n                  promises.push(timeoutPromise);\n                }\n\n                _context.next = 7;\n                return Promise.race(promises);\n\n              case 7:\n                response = _context.sent;\n\n                if (response) {\n                  _context.next = 10;\n                  break;\n                }\n\n                throw new Error(\"Timed out the network response after \" + \"\".concat(this._networkTimeoutSeconds, \" seconds.\"));\n\n              case 10:\n                _context.next = 15;\n                break;\n\n              case 12:\n                _context.prev = 12;\n                _context.t0 = _context[\"catch\"](2);\n\n                if (_context.t0 instanceof Error) {\n                  error = _context.t0;\n                }\n\n              case 15:\n                if (process.env.NODE_ENV !== 'production') {\n                  logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n\n                  if (response) {\n                    logger.log(\"Got response from network.\");\n                  } else {\n                    logger.log(\"Unable to get a response from the network.\");\n                  }\n\n                  messages.printFinalResponse(response);\n                  logger.groupEnd();\n                }\n\n                if (response) {\n                  _context.next = 18;\n                  break;\n                }\n\n                throw new WorkboxError('no-response', {\n                  url: request.url,\n                  error: error\n                });\n\n              case 18:\n                return _context.abrupt(\"return\", response);\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2, 12]]);\n      }));\n\n      function _handle(_x, _x2) {\n        return _handle2.apply(this, arguments);\n      }\n\n      return _handle;\n    }()\n  }]);\n\n  return NetworkOnly;\n}(Strategy);\n\nexport { NetworkOnly };","map":null,"metadata":{},"sourceType":"module"}