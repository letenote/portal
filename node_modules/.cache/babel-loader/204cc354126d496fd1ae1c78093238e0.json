{"ast":null,"code":"/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Route } from './Route.js';\nimport { RegExpRoute } from './RegExpRoute.js';\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * Easily register a RegExp, string, or function with a caching\n * strategy to a singleton Router instance.\n *\n * This method will generate a Route for you if needed and\n * call {@link workbox-routing.Router#registerRoute}.\n *\n * @param {RegExp|string|workbox-routing.Route~matchCallback|workbox-routing.Route} capture\n * If the capture param is a `Route`, all other arguments will be ignored.\n * @param {workbox-routing~handlerCallback} [handler] A callback\n * function that returns a Promise resulting in a Response. This parameter\n * is required if `capture` is not a `Route` object.\n * @param {string} [method='GET'] The HTTP method to match the Route\n * against.\n * @return {workbox-routing.Route} The generated `Route`.\n *\n * @memberof workbox-routing\n */\n\nfunction registerRoute(capture, handler, method) {\n  var route;\n\n  if (typeof capture === 'string') {\n    var captureUrl = new URL(capture, location.href);\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!(capture.startsWith('/') || capture.startsWith('http'))) {\n        throw new WorkboxError('invalid-string', {\n          moduleName: 'workbox-routing',\n          funcName: 'registerRoute',\n          paramName: 'capture'\n        });\n      } // We want to check if Express-style wildcards are in the pathname only.\n      // TODO: Remove this log message in v4.\n\n\n      var valueToCheck = capture.startsWith('http') ? captureUrl.pathname : capture; // See https://github.com/pillarjs/path-to-regexp#parameters\n\n      var wildcards = '[*:?+]';\n\n      if (new RegExp(\"\".concat(wildcards)).exec(valueToCheck)) {\n        logger.debug(\"The '$capture' parameter contains an Express-style wildcard \" + \"character (\".concat(wildcards, \"). Strings are now always interpreted as \") + \"exact matches; use a RegExp for partial or wildcard matches.\");\n      }\n    }\n\n    var matchCallback = function matchCallback(_ref) {\n      var url = _ref.url;\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (url.pathname === captureUrl.pathname && url.origin !== captureUrl.origin) {\n          logger.debug(\"\".concat(capture, \" only partially matches the cross-origin URL \") + \"\".concat(url.toString(), \". This route will only handle cross-origin requests \") + \"if they match the entire URL.\");\n        }\n      }\n\n      return url.href === captureUrl.href;\n    }; // If `capture` is a string then `handler` and `method` must be present.\n\n\n    route = new Route(matchCallback, handler, method);\n  } else if (capture instanceof RegExp) {\n    // If `capture` is a `RegExp` then `handler` and `method` must be present.\n    route = new RegExpRoute(capture, handler, method);\n  } else if (typeof capture === 'function') {\n    // If `capture` is a function then `handler` and `method` must be present.\n    route = new Route(capture, handler, method);\n  } else if (capture instanceof Route) {\n    route = capture;\n  } else {\n    throw new WorkboxError('unsupported-route-type', {\n      moduleName: 'workbox-routing',\n      funcName: 'registerRoute',\n      paramName: 'capture'\n    });\n  }\n\n  var defaultRouter = getOrCreateDefaultRouter();\n  defaultRouter.registerRoute(route);\n  return route;\n}\n\nexport { registerRoute };","map":null,"metadata":{},"sourceType":"module"}