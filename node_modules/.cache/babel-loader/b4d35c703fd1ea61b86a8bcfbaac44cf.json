{"ast":null,"code":"import _toConsumableArray from \"/Users/rezaaditya/Documents/github/portal/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n\n/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nvar logger = process.env.NODE_ENV === 'production' ? null : function () {\n  // Don't overwrite this value if it's already set.\n  // See https://github.com/GoogleChrome/workbox/pull/2284#issuecomment-560470923\n  if (!('__WB_DISABLE_DEV_LOGS' in self)) {\n    self.__WB_DISABLE_DEV_LOGS = false;\n  }\n\n  var inGroup = false;\n  var methodToColorMap = {\n    debug: \"#7f8c8d\",\n    log: \"#2ecc71\",\n    warn: \"#f39c12\",\n    error: \"#c0392b\",\n    groupCollapsed: \"#3498db\",\n    groupEnd: null // No colored prefix on groupEnd\n\n  };\n\n  var print = function print(method, args) {\n    var _console2;\n\n    if (self.__WB_DISABLE_DEV_LOGS) {\n      return;\n    }\n\n    if (method === 'groupCollapsed') {\n      // Safari doesn't print all console.groupCollapsed() arguments:\n      // https://bugs.webkit.org/show_bug.cgi?id=182754\n      if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\n        var _console;\n\n        (_console = console)[method].apply(_console, _toConsumableArray(args));\n\n        return;\n      }\n    }\n\n    var styles = [\"background: \".concat(methodToColorMap[method]), \"border-radius: 0.5em\", \"color: white\", \"font-weight: bold\", \"padding: 2px 0.5em\"]; // When in a group, the workbox prefix is not displayed.\n\n    var logPrefix = inGroup ? [] : ['%cworkbox', styles.join(';')];\n\n    (_console2 = console)[method].apply(_console2, logPrefix.concat(_toConsumableArray(args)));\n\n    if (method === 'groupCollapsed') {\n      inGroup = true;\n    }\n\n    if (method === 'groupEnd') {\n      inGroup = false;\n    }\n  }; // eslint-disable-next-line @typescript-eslint/ban-types\n\n\n  var api = {};\n  var loggerMethods = Object.keys(methodToColorMap);\n\n  var _loop = function _loop() {\n    var key = _loggerMethods[_i];\n    var method = key;\n\n    api[method] = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      print(method, args);\n    };\n  };\n\n  for (var _i = 0, _loggerMethods = loggerMethods; _i < _loggerMethods.length; _i++) {\n    _loop();\n  }\n\n  return api;\n}();\nexport { logger };","map":null,"metadata":{},"sourceType":"module"}