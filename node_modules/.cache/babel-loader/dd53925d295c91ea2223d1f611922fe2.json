{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rezaaditya/Documents/github/my-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/rezaaditya/Documents/github/my-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createClass from \"/Users/rezaaditya/Documents/github/my-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/rezaaditya/Documents/github/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n\n/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to translate URLs into\n * the corresponding cache key, based on the current revision info.\n *\n * @private\n */\n\nvar PrecacheCacheKeyPlugin = /*#__PURE__*/_createClass(function PrecacheCacheKeyPlugin(_ref) {\n  var _this = this;\n\n  var precacheController = _ref.precacheController;\n\n  _classCallCheck(this, PrecacheCacheKeyPlugin);\n\n  this.cacheKeyWillBeUsed = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref2) {\n      var request, params, cacheKey;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              request = _ref2.request, params = _ref2.params;\n              // Params is type any, can't change right now.\n\n              /* eslint-disable */\n              cacheKey = (params === null || params === void 0 ? void 0 : params.cacheKey) || _this._precacheController.getCacheKeyForURL(request.url);\n              /* eslint-enable */\n\n              return _context.abrupt(\"return\", cacheKey ? new Request(cacheKey, {\n                headers: request.headers\n              }) : request);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  this._precacheController = precacheController;\n});\n\nexport { PrecacheCacheKeyPlugin };","map":null,"metadata":{},"sourceType":"module"}