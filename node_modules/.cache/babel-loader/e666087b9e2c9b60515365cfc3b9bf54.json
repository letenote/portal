{"ast":null,"code":"import _createClass from \"/Users/rezaaditya/Documents/github/portal/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/rezaaditya/Documents/github/portal/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n\n/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * `PrecacheFallbackPlugin` allows you to specify an \"offline fallback\"\n * response to be used when a given strategy is unable to generate a response.\n *\n * It does this by intercepting the `handlerDidError` plugin callback\n * and returning a precached response, taking the expected revision parameter\n * into account automatically.\n *\n * Unless you explicitly pass in a `PrecacheController` instance to the\n * constructor, the default instance will be used. Generally speaking, most\n * developers will end up using the default.\n *\n * @memberof workbox-precaching\n */\n\nvar PrecacheFallbackPlugin = /*#__PURE__*/_createClass(\n/**\n * Constructs a new PrecacheFallbackPlugin with the associated fallbackURL.\n *\n * @param {Object} config\n * @param {string} config.fallbackURL A precached URL to use as the fallback\n *     if the associated strategy can't generate a response.\n * @param {PrecacheController} [config.precacheController] An optional\n *     PrecacheController instance. If not provided, the default\n *     PrecacheController will be used.\n */\nfunction PrecacheFallbackPlugin(_ref) {\n  var _this = this;\n\n  var fallbackURL = _ref.fallbackURL,\n      precacheController = _ref.precacheController;\n\n  _classCallCheck(this, PrecacheFallbackPlugin);\n\n  /**\n   * @return {Promise<Response>} The precache response for the fallback URL.\n   *\n   * @private\n   */\n  this.handlerDidError = function () {\n    return _this._precacheController.matchPrecache(_this._fallbackURL);\n  };\n\n  this._fallbackURL = fallbackURL;\n  this._precacheController = precacheController || getOrCreatePrecacheController();\n});\n\nexport { PrecacheFallbackPlugin };","map":null,"metadata":{},"sourceType":"module"}