{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/rezaaditya/Documents/github/my-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"/Users/rezaaditya/Documents/github/my-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/rezaaditya/Documents/github/my-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/rezaaditya/Documents/github/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rezaaditya/Documents/github/my-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/rezaaditya/Documents/github/my-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/rezaaditya/Documents/github/my-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network first](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#network-first-falling-back-to-cache)\n * request strategy.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses](https://developer.chrome.com/docs/workbox/caching-resources-during-runtime/#opaque-responses).\n * Opaque responses are are cross-origin requests where the response doesn't\n * support [CORS](https://enable-cors.org/).\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\n\nvar NetworkFirst = /*#__PURE__*/function (_Strategy) {\n  _inherits(NetworkFirst, _Strategy);\n\n  var _super = _createSuper(NetworkFirst);\n\n  /**\n   * @param {Object} [options]\n   * @param {string} [options.cacheName] Cache name to store and retrieve\n   * requests. Defaults to cache names provided by\n   * {@link workbox-core.cacheNames}.\n   * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n   * to use in conjunction with this caching strategy.\n   * @param {Object} [options.fetchOptions] Values passed along to the\n   * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n   * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n   * `fetch()` requests made by this strategy.\n   * @param {Object} [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n   * @param {number} [options.networkTimeoutSeconds] If set, any network requests\n   * that fail to respond within the timeout will fallback to the cache.\n   *\n   * This option can be used to combat\n   * \"[lie-fi]{@link https://developers.google.com/web/fundamentals/performance/poor-connectivity/#lie-fi}\"\n   * scenarios.\n   */\n  function NetworkFirst() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, NetworkFirst);\n\n    _this = _super.call(this, options); // If this instance contains no plugins with a 'cacheWillUpdate' callback,\n    // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\n\n    if (!_this.plugins.some(function (p) {\n      return 'cacheWillUpdate' in p;\n    })) {\n      _this.plugins.unshift(cacheOkAndOpaquePlugin);\n    }\n\n    _this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (_this._networkTimeoutSeconds) {\n        assert.isType(_this._networkTimeoutSeconds, 'number', {\n          moduleName: 'workbox-strategies',\n          className: _this.constructor.name,\n          funcName: 'constructor',\n          paramName: 'networkTimeoutSeconds'\n        });\n      }\n    }\n\n    return _this;\n  }\n  /**\n   * @private\n   * @param {Request|string} request A request to run this strategy for.\n   * @param {workbox-strategies.StrategyHandler} handler The event that\n   *     triggered the request.\n   * @return {Promise<Response>}\n   */\n\n\n  _createClass(NetworkFirst, [{\n    key: \"_handle\",\n    value: function () {\n      var _handle2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(request, handler) {\n        var logs, promises, timeoutId, _this$_getTimeoutProm, id, promise, networkPromise, response, _iterator, _step, log;\n\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                logs = [];\n\n                if (process.env.NODE_ENV !== 'production') {\n                  assert.isInstance(request, Request, {\n                    moduleName: 'workbox-strategies',\n                    className: this.constructor.name,\n                    funcName: 'handle',\n                    paramName: 'makeRequest'\n                  });\n                }\n\n                promises = [];\n\n                if (this._networkTimeoutSeconds) {\n                  _this$_getTimeoutProm = this._getTimeoutPromise({\n                    request: request,\n                    logs: logs,\n                    handler: handler\n                  }), id = _this$_getTimeoutProm.id, promise = _this$_getTimeoutProm.promise;\n                  timeoutId = id;\n                  promises.push(promise);\n                }\n\n                networkPromise = this._getNetworkPromise({\n                  timeoutId: timeoutId,\n                  request: request,\n                  logs: logs,\n                  handler: handler\n                });\n                promises.push(networkPromise);\n                _context2.next = 8;\n                return handler.waitUntil(_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n                  return _regeneratorRuntime().wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return handler.waitUntil(Promise.race(promises));\n\n                        case 2:\n                          _context.t0 = _context.sent;\n\n                          if (_context.t0) {\n                            _context.next = 7;\n                            break;\n                          }\n\n                          _context.next = 6;\n                          return networkPromise;\n\n                        case 6:\n                          _context.t0 = _context.sent;\n\n                        case 7:\n                          return _context.abrupt(\"return\", _context.t0);\n\n                        case 8:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }))());\n\n              case 8:\n                response = _context2.sent;\n\n                if (process.env.NODE_ENV !== 'production') {\n                  logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n                  _iterator = _createForOfIteratorHelper(logs);\n\n                  try {\n                    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                      log = _step.value;\n                      logger.log(log);\n                    }\n                  } catch (err) {\n                    _iterator.e(err);\n                  } finally {\n                    _iterator.f();\n                  }\n\n                  messages.printFinalResponse(response);\n                  logger.groupEnd();\n                }\n\n                if (response) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                throw new WorkboxError('no-response', {\n                  url: request.url\n                });\n\n              case 12:\n                return _context2.abrupt(\"return\", response);\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function _handle(_x, _x2) {\n        return _handle2.apply(this, arguments);\n      }\n\n      return _handle;\n    }()\n    /**\n     * @param {Object} options\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs array\n     * @param {Event} options.event\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_getTimeoutPromise\",\n    value: function _getTimeoutPromise(_ref2) {\n      var _this2 = this;\n\n      var request = _ref2.request,\n          logs = _ref2.logs,\n          handler = _ref2.handler;\n      var timeoutId;\n      var timeoutPromise = new Promise(function (resolve) {\n        var onNetworkTimeout = /*#__PURE__*/function () {\n          var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n            return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    if (process.env.NODE_ENV !== 'production') {\n                      logs.push(\"Timing out the network response at \" + \"\".concat(_this2._networkTimeoutSeconds, \" seconds.\"));\n                    }\n\n                    _context3.t0 = resolve;\n                    _context3.next = 4;\n                    return handler.cacheMatch(request);\n\n                  case 4:\n                    _context3.t1 = _context3.sent;\n                    (0, _context3.t0)(_context3.t1);\n\n                  case 6:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _callee3);\n          }));\n\n          return function onNetworkTimeout() {\n            return _ref3.apply(this, arguments);\n          };\n        }();\n\n        timeoutId = setTimeout(onNetworkTimeout, _this2._networkTimeoutSeconds * 1000);\n      });\n      return {\n        promise: timeoutPromise,\n        id: timeoutId\n      };\n    }\n    /**\n     * @param {Object} options\n     * @param {number|undefined} options.timeoutId\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs Array.\n     * @param {Event} options.event\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_getNetworkPromise\",\n    value: function () {\n      var _getNetworkPromise2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(_ref4) {\n        var timeoutId, request, logs, handler, error, response;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                timeoutId = _ref4.timeoutId, request = _ref4.request, logs = _ref4.logs, handler = _ref4.handler;\n                _context4.prev = 1;\n                _context4.next = 4;\n                return handler.fetchAndCachePut(request);\n\n              case 4:\n                response = _context4.sent;\n                _context4.next = 10;\n                break;\n\n              case 7:\n                _context4.prev = 7;\n                _context4.t0 = _context4[\"catch\"](1);\n\n                if (_context4.t0 instanceof Error) {\n                  error = _context4.t0;\n                }\n\n              case 10:\n                if (timeoutId) {\n                  clearTimeout(timeoutId);\n                }\n\n                if (process.env.NODE_ENV !== 'production') {\n                  if (response) {\n                    logs.push(\"Got response from network.\");\n                  } else {\n                    logs.push(\"Unable to get a response from the network. Will respond \" + \"with a cached response.\");\n                  }\n                }\n\n                if (!(error || !response)) {\n                  _context4.next = 17;\n                  break;\n                }\n\n                _context4.next = 15;\n                return handler.cacheMatch(request);\n\n              case 15:\n                response = _context4.sent;\n\n                if (process.env.NODE_ENV !== 'production') {\n                  if (response) {\n                    logs.push(\"Found a cached response in the '\".concat(this.cacheName, \"'\") + \" cache.\");\n                  } else {\n                    logs.push(\"No response found in the '\".concat(this.cacheName, \"' cache.\"));\n                  }\n                }\n\n              case 17:\n                return _context4.abrupt(\"return\", response);\n\n              case 18:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[1, 7]]);\n      }));\n\n      function _getNetworkPromise(_x3) {\n        return _getNetworkPromise2.apply(this, arguments);\n      }\n\n      return _getNetworkPromise;\n    }()\n  }]);\n\n  return NetworkFirst;\n}(Strategy);\n\nexport { NetworkFirst };","map":null,"metadata":{},"sourceType":"module"}