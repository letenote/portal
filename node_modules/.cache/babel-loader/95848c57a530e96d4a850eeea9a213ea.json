{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rezaaditya/Documents/github/my-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/rezaaditya/Documents/github/my-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nexport var cacheOkAndOpaquePlugin = {\n  /**\n   * Returns a valid response (to allow caching) if the status is 200 (OK) or\n   * 0 (opaque).\n   *\n   * @param {Object} options\n   * @param {Response} options.response\n   * @return {Response|null}\n   *\n   * @private\n   */\n  cacheWillUpdate: function () {\n    var _cacheWillUpdate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {\n      var response;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              response = _ref.response;\n\n              if (!(response.status === 200 || response.status === 0)) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\", response);\n\n            case 3:\n              return _context.abrupt(\"return\", null);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function cacheWillUpdate(_x) {\n      return _cacheWillUpdate.apply(this, arguments);\n    }\n\n    return cacheWillUpdate;\n  }()\n};","map":null,"metadata":{},"sourceType":"module"}